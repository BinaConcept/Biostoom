{"version":3,"sources":["app/Navbar.js","components/employee/employee.js","App.js","api/server.js","app/store.js","index.js"],"names":["Navbar","className","Employee","style","borderRadius","borderLeft","borderRight","borderTop","borderBottom","width","src","alt","type","id","placeholder","App","seedDate","configureStore","reducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","user","randomFromArray","array","length","db","factory","primaryKey","nanoid","firstName","String","lastName","name","username","posts","manyOf","post","title","date","content","reactions","oneOf","comments","comment","text","reaction","thumbsUp","Number","hooray","heart","rocket","eyes","createUserData","internet","userName","i","author","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","get","req","res","ctx","getAll","map","delay","json","data","body","status","findFirst","where","equals","params","postId","patch","updatedPost","update","notifications","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","JSON","stringify","sendMessage","payload","on","message","parse","notificationTemplates","numNotifications","pastDate","now","parseISO","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.48028f06.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1>Biostoom application</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\"></div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react'\r\n\r\nexport const Employee = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div\r\n        className=\"card p-3 mx-3 mt-n5 shadow-lg mx-auto mt-5\"\r\n        style={{\r\n          borderRadius: '10px',\r\n          borderLeft: '8px #007bff solid',\r\n          borderRight: 'none',\r\n          borderTop: 'none',\r\n          borderBottom: 'none',\r\n        }}\r\n      >\r\n        <h4 className=\"card-title mb-3 text-primary text-uppercase text-center\">\r\n          Werknemer\r\n        </h4>\r\n        <div className=\"card-body\">\r\n          <form>\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-3\">\r\n                <div\r\n                  style={{ width: '100%' }}\r\n                  className=\"d-flex justify-content-center mb-3\"\r\n                >\r\n                  <img\r\n                    src=\"images/loginIcone.png\"\r\n                    alt=\"loginIcone\"\r\n                    style={{ width: '200px' }}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"col-lg-9 mt-auto\">\r\n                <div className=\"row\">\r\n                  <div className=\"col-lg-3\">\r\n                    <div className=\"input-group mb-3   \">\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"PatchNr\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Patch nr\"\r\n                        aria-label=\"PatchNr\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <div className=\"input-group mb-3   \">\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"employeeNr\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Naam\"\r\n                        aria-label=\"Name\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <div className=\"input-group mb-3   \">\r\n                      <input\r\n                        type=\"email\"\r\n                        id=\"firstname\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Voornaam\"\r\n                        aria-label=\"Firstname\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"input-group mb-3\">\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Email\"\r\n                    aria-label=\"Email\"\r\n                    aria-describedby=\"basic-addon1\"\r\n                  />\r\n                </div>\r\n                <div className=\"row\">\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-success\"\r\n                      style={{ width: '100% ' }}\r\n                    >\r\n                      Aanmaken\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-secondary\"\r\n                      style={{ width: '100% ' }}\r\n                    >\r\n                      Annuleren\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './app/Navbar'\r\nimport { Company } from './components/company/company'\r\nimport { Employee } from './components/employee/employee'\r\nimport { Login } from './components/login/login'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      {/* <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <section>\r\n                <h2>Welcome to the Redux Essentials example app!</h2>\r\n              </section>\r\n            )}\r\n          />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div> */}\r\n      <Employee/>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n","import { configureStore } from '@reduxjs/toolkit'\n\nexport default configureStore({\n  reducer: () => ({}),\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport { worker } from './api/server'\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nstart()\n"],"sourceRoot":""}